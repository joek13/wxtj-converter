{"version":3,"sources":["components/footer.tsx","components/header.tsx","img/help1.png","img/help2.png","components/howto.tsx","components/options.tsx","Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Footer","Container","className","fluid","href","Header","Howto","Row","Col","md","Image","src","help1","width","height","alt","rounded","help2","Options","props","handleSubmit","loading","useState","playlistUrl","setPlaylistUrl","localStorage","getItem","useOldPlaylistEditor","setUseOldPlaylistEditor","undefined","showTitle","setShowTitle","showDate","setShowDate","Form","onSubmit","ev","preventDefault","Group","controlId","Label","Control","type","placeholder","value","onChange","e","currentTarget","required","disabled","Check","checked","setItem","toString","label","Text","Button","variant","Warnings","warnings","map","warning","Alert","Heading","Main","setLoading","errorMessage","setErrorMessage","setWarnings","params","apiEndpoint","oldPlaylistEditor","data","axios","post","then","response","playlistName","element","document","createElement","file","Blob","body","URL","createObjectURL","download","slugify","appendChild","click","remove","catch","err","console","error","log","request","finally","Spinner","animation","defaults","baseURL","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7abd35bb.chunk.js","sourcesContent":["import { Container } from \"react-bootstrap\";\n\n/**\n * App footer with contact info and source code link.\n */\nexport default function Footer() {\n    return <footer>\n        <Container className=\"bg-light text-center p-5\" fluid>\n            <p>Made with love by Joe Kerrigan</p>\n            <p>Check out the <a href=\"https://github.com/joek13/wxtj-converter\">source code</a></p>\n            <p>Bugs? Feedback or feature requests? Want me to listen to your show? Reach me at <a href=\"mailto:joek1301@gmail.com\">joek1301@gmail.com</a></p>\n        </Container>\n    </footer>;\n}","import { Container } from \"react-bootstrap\";\n\n/**\n * Header component with snazzy title and subtitle.\n */\nfunction Header() {\n    return (\n        <header>\n            <section className=\"jumbotron text-center\">\n                <Container>\n                    <h1>wxtj/wtju playlist converter</h1>\n                    <p className=\"lead\">Quickly convert your Spotify playlists to <code>.csv</code></p>\n                </Container>\n            </section>\n        </header>\n    );\n}\n\nexport default Header;","export default __webpack_public_path__ + \"static/media/help1.821cbdef.png\";","export default __webpack_public_path__ + \"static/media/help2.910cc469.png\";","import { Col, Container, Image, Row } from \"react-bootstrap\";\nimport help1 from \"../img/help1.png\";\nimport help2 from \"../img/help2.png\";\n\n/**\n * Howto component with brief visual explanation of how to use the app.\n */\nexport default function Howto() {\n    return (<Container className=\"text-center mt-5\">\n        <h2 className=\"h4 mb-3\">How it works</h2>\n        <Row>\n            <Col className=\"px-4\" md>\n                <Image src={help1} className=\"mb-2\" width=\"600\" height=\"365\" alt=\"Image of a Spotify playlist. The user is clicking the Share submenu and selecting the option Copy Playlist Link.\" fluid rounded />\n                <p>Right-click your playlist on Spotify. Use Share &gt; Copy Playlist Link, and paste the URL in the box above.</p>\n            </Col>\n            <Col className=\"px-4\" md>\n                <Image src={help2} className=\"mb-2\" width=\"600\" height=\"365\" alt=\"Image of the WTJU station interface.\" fluid rounded />\n                <p>Once the <code>.csv</code> file is downloaded, open your show WTJU's playlist editor. Look at \"upload playlist\", choose the downloaded <code>.csv</code> file, and click \"upload\".</p>\n            </Col>\n        </Row>\n    </Container>)\n}","import React, { ChangeEvent, useState } from \"react\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\n\n/**\n * The convert parameters that the user will select.\n * Returned via the callback handleSubmit in Options.\n */\nexport interface ConvertParams {\n    playlistUrl: string;\n    oldPlaylistEditor: boolean;\n    showTitle?: string;\n    showDate?: string\n}\n\n/**\n * Component for configuring the conversion options, including the playlist URL and output format. \n */\nexport function Options(props: { loading: boolean, handleSubmit: ((options: ConvertParams) => void) }) {\n    let { handleSubmit, loading } = props;\n\n    // declare default state for each option\n    let [playlistUrl, setPlaylistUrl] = useState<string>(\"\");\n    // read preference for old/new playlist editor from localstorage, if possible\n    let [useOldPlaylistEditor, setUseOldPlaylistEditor] = useState<boolean>(localStorage.getItem(\"useOldPlaylistEditor\") === \"true\");\n    // read show title from localstorage, if possible\n    let [showTitle, setShowTitle] = useState<string | undefined>(localStorage.getItem(\"showTitle\") || undefined);\n    let [showDate, setShowDate] = useState<string>(\"\");\n\n    let handleShowTitleChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        let showTitle = ev.currentTarget.value;\n\n        // store show title in local storage, since it is likely to be the same across multiple visits\n        localStorage.setItem(\"showTitle\", showTitle);\n        setShowTitle(showTitle);\n    };\n\n    let handleOutputFormatChanged = (ev: ChangeEvent<HTMLInputElement>) => {\n        let useOldPlaylistEditor = ev.currentTarget.checked;\n\n        // store preferred output format in local storage, since it is likely to stay the same across multiple visits\n        localStorage.setItem(\"useOldPlaylistEditor\", useOldPlaylistEditor.toString());\n        setUseOldPlaylistEditor(useOldPlaylistEditor);\n    }\n\n    let handleFormSubmit = (ev: React.MouseEvent<HTMLFormElement>) => {\n        ev.preventDefault();\n\n        // TODO: validate that URL is actually a Spotify URL?\n        // this happens serverside, but we could also do it clientside.\n\n        // build selected options into ConvertParams\n        let params: ConvertParams = {\n            \"playlistUrl\": playlistUrl,\n            \"oldPlaylistEditor\": useOldPlaylistEditor,\n            \"showTitle\": showTitle,\n            \"showDate\": showDate\n        };\n\n        handleSubmit(params);\n    };\n\n\n    return (<Form onSubmit={handleFormSubmit}>\n        <Form.Group className=\"mb-3\" controlId=\"playlistUrl\">\n            <Form.Label>Playlist URL</Form.Label>\n            {/* note that each form control is disabled if we are currently loading */}\n            <Form.Control type=\"url\" placeholder=\"https://open.spotify.com/playlist/4BmW06g5m70HkwZEA1mds9?si=9f6b19eec5fd44e3\" value={playlistUrl} onChange={e => setPlaylistUrl(e.currentTarget.value)} required={true} disabled={loading} />\n        </Form.Group>\n        <Form.Group className=\"mb-2\" controlId=\"oldPlaylistEditor\">\n            <Form.Check checked={useOldPlaylistEditor} onChange={handleOutputFormatChanged} label=\"Format for Old Playlist Editor\" disabled={loading} />\n        </Form.Group>\n        {/* selectively show these controls if we are using the old playlist editor */}\n        {useOldPlaylistEditor ?\n            (<Row>\n                <Col>\n                    <Form.Group controlId=\"showTitle\">\n                        <Form.Label>Show title</Form.Label>\n                        <Form.Control placeholder=\"hot tub listening club\" value={showTitle} onChange={handleShowTitleChange} required={true} disabled={loading} />\n                        <Form.Text>Your show's title as it appears in the station interface.</Form.Text>\n                    </Form.Group>\n                </Col>\n                <Col>\n                    <Form.Group controlId=\"showDate\">\n                        <Form.Label>Show date</Form.Label>\n                        <Form.Control type=\"date\" value={showDate} onChange={e => setShowDate(e.currentTarget.value)} required={true} disabled={loading} />\n                        <Form.Text>The date this show will air.</Form.Text>\n                    </Form.Group>\n                </Col>\n            </Row>)\n            : null}\n        <div className=\"text-center\">\n            {/* if we are currently loading, disable the button */}\n            <Button variant=\"primary\" type=\"submit\" className=\"mt-3\" disabled={loading}>Convert</Button>\n        </div>\n    </Form>);\n}\n","import { useState } from \"react\";\nimport { Alert, Container, Spinner } from \"react-bootstrap\";\nimport Footer from \"./components/footer\";\nimport Header from \"./components/header\"\nimport Howto from \"./components/howto\";\nimport { Options, ConvertParams } from \"./components/options\";\nimport slugify from \"slugify\";\nimport axios from \"axios\";\n\n/**\n * Main component of the app.\n */\nfunction Main() {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string | undefined>(undefined);\n    const [warnings, setWarnings] = useState<string[]>([]);\n\n    // callback for when user presses \"convert\"\n    let convert = (params: ConvertParams) => {\n        // start loading\n        setLoading(true);\n        // clear error message and any warnings\n        setErrorMessage(undefined);\n        setWarnings([]);\n\n        // select which API endpoint to use based on format\n        const apiEndpoint = params.oldPlaylistEditor ? \"/convert_old_playlist\" : \"/convert_new_playlist\";\n\n        // prepare request data for API\n        const data = {\n            \"playlist_url\": params.playlistUrl,\n            \"show_title\": params.showTitle,\n            \"show_date\": params.showDate\n        };\n\n        // post request to api endpoint\n        axios.post(apiEndpoint, data).then((response) => {\n            if (response.data) {\n                setWarnings(response.data.warnings);\n\n                // possible for the backend to not return a playlist name\n                // (sometimes, for whatever reason, spotify web api returns 404)\n                let playlistName = response.data.playlistName || \"playlist\";\n\n                // sort of a hack: download the csv file\n                // thanks https://stackoverflow.com/questions/44656610/download-a-string-as-txt-file-in-react/44661948\n                const element = document.createElement(\"a\");\n                const file = new Blob([response.data.body], { type: 'text/plain' });\n                element.href = URL.createObjectURL(file);\n                element.download = `${slugify(playlistName)}.csv`;\n                document.body.appendChild(element); // Required for this to work in FireFox\n                element.click();\n                element.remove();\n            } else {\n                // don't know how to handle this response, display generic error message\n                setErrorMessage(\"Malformed response\");\n            }\n        }).catch((err) => {\n            // log the error\n            console.error(err);\n            // and print debug info\n            console.log(err);\n\n            if (err.response) {\n                // response error\n                // display a descriptive message if we can\n                if (err.response.data && err.response.data.error) {\n                    setErrorMessage(err.response.data.error);\n                } else {\n                    setErrorMessage(\"Unknown server error\");\n                }\n            } else if (err.request) {\n                // request error\n                // just display a generic message\n                setErrorMessage(\"Unknown request error\");\n            } else {\n                // generic error message\n                setErrorMessage(\"Unknown error\")\n            }\n        }).finally(() => {\n            // regardless of whether request was successful or not:\n            // disable the loading spinner\n            setLoading(false);\n        });\n    };\n\n    return (<>\n        <main>\n            <Header />\n            <Container className=\"options\" fluid=\"md\">\n                <Options loading={loading} handleSubmit={convert} />\n            </Container>\n            <Container className=\"text-center py-3\">\n                {loading ?\n                    <>\n                        <Spinner animation=\"border\" />\n                        <p>Converting your tunes...</p>\n                    </>\n                    : null}\n            </Container>\n            {/* if we have an error, show an alert box */}\n            {errorMessage && (\n                <Container className=\"options\" fluid=\"md\">\n                    <Alert variant=\"danger\">\n                        <Alert.Heading>Conversion error</Alert.Heading>\n                        <p>{errorMessage}</p>\n                    </Alert>\n                </Container>)}\n            {/* render warnings if present */}\n            {warnings !== [] && <Warnings warnings={warnings} />}\n            <Howto />\n            <Footer />\n        </main>\n    </>);\n}\n\n/**\n * Displays warnings for a given conversion.\n */\nfunction Warnings(props: { warnings: string[] }) {\n    const { warnings } = props;\n    return <Container className=\"options\" fluid=\"md\">\n        {\n            warnings.map((warning) => (\n                <Alert variant=\"warning\">\n                    <Alert.Heading>Track warning</Alert.Heading>\n                    <p>{warning}</p>\n                </Alert>\n            ))\n        }\n    </Container >\n}\n\nexport default Main;","// import custom stylesheet\nimport \"./App.scss\"\nimport axios from \"axios\";\n\nimport Main from \"./Main\";\n\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n  axios.defaults.baseURL = \"https://mlnaw218id.execute-api.us-east-1.amazonaws.com\";\n} else {\n  axios.defaults.baseURL = \"https://k3eycnkg18.execute-api.us-east-1.amazonaws.com/\";\n}\n\n\nfunction App() {\n  return (<Main />);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}